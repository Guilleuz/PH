


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos, DATA
    2 00000000 00 00 00 
              03 03 03 
              06 06 06 vector  DCB              0, 0, 0, 3, 3, 3, 6, 6, 6
    3 00000009 00 00 00        ALIGN            4
    4 0000000C         
    5 0000000C                 AREA             Codigo, CODE
    6 00000000                 EXPORT           candidatos_actualizar_arm
    7 00000000                 PRESERVE8        {TRUE}
    8 00000000                 ENTRY
    9 00000000         
   10 00000000         candidatos_actualizar_arm
   11 00000000 E92D5FF0        stmdb            SP!, {r4-r12, LR} ; cambiar por
                                                             store multiple
   12 00000004         ;mov r4, r0              ; r4 = @cuadricula
   13 00000004 E3A05000        mov              r5, #0      ; r5 = celdas vacia
                                                            s
   14 00000008 E3A06000        mov              r6, #0      ; r6 = i = 0
   15 0000000C         
   16 0000000C         ; borramos los candidatos
   17 0000000C         Filas_1_arm
   18 0000000C E3560009        cmp              r6, #9
   19 00000010 0A00000B        beq              finB1_1_arm
   20 00000014 E3A07000        mov              r7, #0      ; r7 = j = 0
   21 00000018         Columnas_1_arm
   22 00000018 E3570009        cmp              r7, #9
   23 0000001C 0A000006        beq              finB2_1_arm
   24 00000020 E0808286        add              r8, r0, r6, LSL #5 ; r8 = @base
                                                             + i * 16 
   25 00000024 E0888087        add              r8, r8, r7, LSL #1 ; r8 = (@bas
                                                            e + i * 16) + j * 2
                                                            
   26 00000028 E1D890B0        ldrh             r9, [r8]    ; r9 = cuadricula[i
                                                            ][j]
   27 0000002C E209907F        and              r9, r9, #0x0000007F ; r9 = r9 A
                                                            ND #0x0000007F, pon
                                                            emos todos los bits
                                                             de candidatos a 0
   28 00000030 E1C890B0        strh             r9, [r8]
   29 00000034 E2877001        add              r7, r7, #1  ; j++
   30 00000038 EAFFFFF6        b                Columnas_1_arm
   31 0000003C         finB2_1_arm
   32 0000003C E2866001        add              r6, r6, #1  ; i++
   33 00000040 EAFFFFF1        b                Filas_1_arm
   34 00000044         finB1_1_arm
   35 00000044         
   36 00000044         ; propagamos los candidatos
   37 00000044         ; contamos celdas vacias
   38 00000044 E3A06000        mov              r6, #0      ; r6 = i = 0
   39 00000048         Filas_2_arm
   40 00000048 E3560009        cmp              r6, #9
   41 0000004C 0A00003B        beq              finB1_2_arm
   42 00000050 E3A07000        mov              r7, #0      ; r7 = j = 0
   43 00000054         Columnas_2_arm
   44 00000054 E3570009        cmp              r7, #9
   45 00000058 0A000036        beq              finB2_2_arm
   46 0000005C E0808286        add              r8, r0, r6, LSL #5 ; r8 = @base
                                                             + i * 16 
   47 00000060 E0888087        add              r8, r8, r7, LSL #1 ; r8 = (@bas



ARM Macro Assembler    Page 2 


                                                            e + i * 16) + j * 2
                                                            
   48 00000064 E1D890B0        ldrh             r9, [r8]    ; r9 = celda[i][j]
   49 00000068 E209900F        and              r9, r9, #0x0000000f 
                                                            ; r9 = valor celda
   50 0000006C E3590000        cmp              r9, #0
   51 00000070         ; si el valor es 0, contamos celda vacía
   52 00000070 02855001        addeq            r5, r5, #1  ; celdas_vacias++
   53 00000074         ; si no, propagamos el candidato
   54 00000074 0A00002D        beq              sinLlamada
   55 00000078         ; inlining de la función candidatos_propagar_arm   
   56 00000078         
   57 00000078 E2899006        add              r9, r9, #6  ; r9 = valor + BIT_
                                                            CANDIDATOS - 1
   58 0000007C E080A286        add              r10, r0, r6, LSL #5 ; r10 = @cu
                                                            adricula[fila][0]
   59 00000080 E080B087        add              r11, r0, r7, LSL #1 ; r11 = @cu
                                                            adricula[0][columna
                                                            ] 
   60 00000084         
   61 00000084 E3A02001        mov              r2, #1      ; r2 = 1
   62 00000088 E3A01000        mov              r1, #0      ; r1 = i
   63 0000008C         ; Propagamos el candidato en la fila y la columna
   64 0000008C         BUCLE_arm
   65 0000008C E3510009        cmp              r1, #9
   66 00000090 0A000007        beq              finBUC_arm
   67 00000094 E1DA30B0        ldrh             r3, [r10]   ; r3 = cuadricula[f
                                                            ila][i]
   68 00000098 E1833912        orr              r3, r3, r2, LSL r9 ; r3 = r3 | 
                                                            (#1 << r9)
   69 0000009C E0CA30B2        strh             r3, [r10], #2 ; postincremento,
                                                             r10 apuntará a cu
                                                            adricula[fila][i++]
                                                            
   70 000000A0 E1DB30B0        ldrh             r3, [r11]   ; r3 = cuadricula[i
                                                            ][columna]
   71 000000A4 E1833912        orr              r3, r3, r2, LSL r9 ; r3 = r3| (
                                                            #1 << r9)
   72 000000A8 E0CB32B0        strh             r3, [r11], #32 ; postincremento
                                                            , r11 apuntará a c
                                                            uadricula[i++][colu
                                                            mna]
   73 000000AC E2811001        add              r1, r1, #1  ; i++
   74 000000B0 EAFFFFF5        b                BUCLE_arm
   75 000000B4         finBUC_arm
   76 000000B4         
   77 000000B4         ;LDR r4, =vector         ; r4 = @vector
   78 000000B4         ;ldrb r3, [r4, r6]       ; r3 = vector[fila] = init_i
   79 000000B4         ;ldrb r4, [r4, r7]       ; r4 = vector[columna] = init_j
                       
   80 000000B4         
   81 000000B4 E3A03000        mov              r3, #0
   82 000000B8 E3560003        cmp              r6, #3
   83 000000BC BA000003        blt              fin_init_i
   84 000000C0 E3560006        cmp              r6, #6
   85 000000C4 B3A03003        movlt            r3, #3
   86 000000C8 BA000000        blt              fin_init_i
   87 000000CC E3A03006        mov              r3, #6
   88 000000D0         



ARM Macro Assembler    Page 3 


   89 000000D0         fin_init_i
   90 000000D0 E3A04000        mov              r4, #0
   91 000000D4 E3570003        cmp              r7, #3
   92 000000D8 BA000003        blt              fin_init_j
   93 000000DC E3570006        cmp              r7, #6
   94 000000E0 B3A04003        movlt            r4, #3
   95 000000E4 BA000000        blt              fin_init_j
   96 000000E8 E3A04006        mov              r4, #6
   97 000000EC         
   98 000000EC         fin_init_j
   99 000000EC E0808283        add              r8, r0, r3, LSL #5 ; @cuadricul
                                                            a[init_i][0]
  100 000000F0 E0888084        add              r8, r8, r4, LSL #1 ; @cuadricul
                                                            a[init_i][init_j]
  101 000000F4 E3A01000        mov              r1, #0      ; r1 = i
  102 000000F8         ; propagamos el candidato en la region correspondiente
  103 000000F8         BUC_I_arm
  104 000000F8 E3510003        cmp              r1, #3
  105 000000FC 0A00000B        beq              finBUC_I_arm
  106 00000100         ;mov r10, #0             ; r10 = j = 0
  107 00000100 E088B281        add              r11, r8, r1, LSL #5 ; r11 = @cu
                                                            adricula[init_i + i
                                                            ][init_j]
  108 00000104         BUC_J_arm
  109 00000104         ;cmp r10, #3
  110 00000104         ;beq finBUC_J_arm
  111 00000104         ;ldrh r12, [r11]         ; r12 = @cuadricula[init_i + i]
                       [init_j + j]
  112 00000104         ;orr r12, r12, r2, LSL r9; r12 = r12 | (#1 << r9)
  113 00000104         ;strh r12, [r11], #2     ; guardamos r12 en @r11 con un 
                       postincremento de 2
  114 00000104         ; de forma que r11 apuntara a cuadricula[init_i + i][ini
                       t_j + (j++)]
  115 00000104         ;add r10, r10, #1        ; j++
  116 00000104         ;b BUC_J_arm
  117 00000104         finBUC_J_arm
  118 00000104         
  119 00000104         ; nueva ver
  120 00000104         ; rebaja a 960 us
  121 00000104 E1DBC0B0        ldrh             r12, [r11]
  122 00000108 E18CC912        orr              r12, r12, r2, LSL r9 ; r12 = r1
                                                            2 | (#1 << r9)
  123 0000010C E0CBC0B2        strh             r12, [r11], #2
  124 00000110 E1DBC0B0        ldrh             r12, [r11]
  125 00000114 E18CC912        orr              r12, r12, r2, LSL r9 ; r12 = r1
                                                            2 | (#1 << r9)
  126 00000118 E0CBC0B2        strh             r12, [r11], #2
  127 0000011C E1DBC0B0        ldrh             r12, [r11]
  128 00000120 E18CC912        orr              r12, r12, r2, LSL r9 ; r12 = r1
                                                            2 | (#1 << r9)
  129 00000124 E0CBC0B2        strh             r12, [r11], #2
  130 00000128         
  131 00000128 E2811001        add              r1, r1, #1  ; i++
  132 0000012C EAFFFFF1        b                BUC_I_arm
  133 00000130         finBUC_I_arm
  134 00000130         
  135 00000130         ; fin del inlining de la funcion candidatos_propagar_arm
                       
  136 00000130         sinLlamada



ARM Macro Assembler    Page 4 


  137 00000130 E2877001        add              r7, r7, #1  ; j++
  138 00000134 EAFFFFC6        b                Columnas_2_arm
  139 00000138         finB2_2_arm
  140 00000138 E2866001        add              r6, r6, #1  ; i++
  141 0000013C EAFFFFC1        b                Filas_2_arm
  142 00000140         finB1_2_arm
  143 00000140         
  144 00000140         ; devolvemos el numero de celdas vacias
  145 00000140 E1A00005        mov              r0, r5      ; r5 = celdas_vacia
                                                            s
  146 00000144 E8BD9FF0        ldmia            SP!, {r4-r12, PC} ; cambiar por
                                                             load multiple
  147 00000148                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\candidatos_actualizar_arm.d -o.\objects\candidatos_actualizar_arm.o -IC:
\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Phili
ps --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=
.\listings\candidatos_actualizar_arm.lst candidatos_actualizar_arm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

datos 00000000

Symbol: datos
   Definitions
      At line 1 in file candidatos_actualizar_arm.s
   Uses
      None
Comment: datos unused
vector 00000000

Symbol: vector
   Definitions
      At line 2 in file candidatos_actualizar_arm.s
   Uses
      None
Comment: vector unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BUCLE_arm 0000008C

Symbol: BUCLE_arm
   Definitions
      At line 64 in file candidatos_actualizar_arm.s
   Uses
      At line 74 in file candidatos_actualizar_arm.s
Comment: BUCLE_arm used once
BUC_I_arm 000000F8

Symbol: BUC_I_arm
   Definitions
      At line 103 in file candidatos_actualizar_arm.s
   Uses
      At line 132 in file candidatos_actualizar_arm.s
Comment: BUC_I_arm used once
BUC_J_arm 00000104

Symbol: BUC_J_arm
   Definitions
      At line 108 in file candidatos_actualizar_arm.s
   Uses
      None
Comment: BUC_J_arm unused
Codigo 00000000

Symbol: Codigo
   Definitions
      At line 5 in file candidatos_actualizar_arm.s
   Uses
      None
Comment: Codigo unused
Columnas_1_arm 00000018

Symbol: Columnas_1_arm
   Definitions
      At line 21 in file candidatos_actualizar_arm.s
   Uses
      At line 30 in file candidatos_actualizar_arm.s
Comment: Columnas_1_arm used once
Columnas_2_arm 00000054

Symbol: Columnas_2_arm
   Definitions
      At line 43 in file candidatos_actualizar_arm.s
   Uses
      At line 138 in file candidatos_actualizar_arm.s
Comment: Columnas_2_arm used once
Filas_1_arm 0000000C

Symbol: Filas_1_arm
   Definitions
      At line 17 in file candidatos_actualizar_arm.s
   Uses
      At line 33 in file candidatos_actualizar_arm.s
Comment: Filas_1_arm used once
Filas_2_arm 00000048

Symbol: Filas_2_arm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 39 in file candidatos_actualizar_arm.s
   Uses
      At line 141 in file candidatos_actualizar_arm.s
Comment: Filas_2_arm used once
candidatos_actualizar_arm 00000000

Symbol: candidatos_actualizar_arm
   Definitions
      At line 10 in file candidatos_actualizar_arm.s
   Uses
      At line 6 in file candidatos_actualizar_arm.s
Comment: candidatos_actualizar_arm used once
finB1_1_arm 00000044

Symbol: finB1_1_arm
   Definitions
      At line 34 in file candidatos_actualizar_arm.s
   Uses
      At line 19 in file candidatos_actualizar_arm.s
Comment: finB1_1_arm used once
finB1_2_arm 00000140

Symbol: finB1_2_arm
   Definitions
      At line 142 in file candidatos_actualizar_arm.s
   Uses
      At line 41 in file candidatos_actualizar_arm.s
Comment: finB1_2_arm used once
finB2_1_arm 0000003C

Symbol: finB2_1_arm
   Definitions
      At line 31 in file candidatos_actualizar_arm.s
   Uses
      At line 23 in file candidatos_actualizar_arm.s
Comment: finB2_1_arm used once
finB2_2_arm 00000138

Symbol: finB2_2_arm
   Definitions
      At line 139 in file candidatos_actualizar_arm.s
   Uses
      At line 45 in file candidatos_actualizar_arm.s
Comment: finB2_2_arm used once
finBUC_I_arm 00000130

Symbol: finBUC_I_arm
   Definitions
      At line 133 in file candidatos_actualizar_arm.s
   Uses
      At line 105 in file candidatos_actualizar_arm.s
Comment: finBUC_I_arm used once
finBUC_J_arm 00000104

Symbol: finBUC_J_arm
   Definitions
      At line 117 in file candidatos_actualizar_arm.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: finBUC_J_arm unused
finBUC_arm 000000B4

Symbol: finBUC_arm
   Definitions
      At line 75 in file candidatos_actualizar_arm.s
   Uses
      At line 66 in file candidatos_actualizar_arm.s
Comment: finBUC_arm used once
fin_init_i 000000D0

Symbol: fin_init_i
   Definitions
      At line 89 in file candidatos_actualizar_arm.s
   Uses
      At line 83 in file candidatos_actualizar_arm.s
      At line 86 in file candidatos_actualizar_arm.s

fin_init_j 000000EC

Symbol: fin_init_j
   Definitions
      At line 98 in file candidatos_actualizar_arm.s
   Uses
      At line 92 in file candidatos_actualizar_arm.s
      At line 95 in file candidatos_actualizar_arm.s

sinLlamada 00000130

Symbol: sinLlamada
   Definitions
      At line 136 in file candidatos_actualizar_arm.s
   Uses
      At line 54 in file candidatos_actualizar_arm.s
Comment: sinLlamada used once
19 symbols
353 symbols in table
